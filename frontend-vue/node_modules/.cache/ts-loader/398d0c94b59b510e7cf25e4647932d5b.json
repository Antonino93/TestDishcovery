{"remainingRequest":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\ts-loader\\index.js??ref--14-3!C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\SVILUPPO\\test\\frontend-vue\\src\\services\\realWorldApi\\RealWorldApiArticle.ts","dependencies":[{"path":"C:\\SVILUPPO\\test\\frontend-vue\\src\\services\\realWorldApi\\RealWorldApiArticle.ts","mtime":1654014379722},{"path":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\SVILUPPO\\test\\frontend-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\SVILUPPO\\test\\frontend-vue\\src\\services\\realWorldApi\\RealWorldApiArticle.ts"],"names":[],"mappings":"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","sourcesContent":["import IPagination from \"@/services/common/IPagination\";\r\n\r\nimport {\r\n  IArticle,\r\n  IArticleAddCommentRequestParams,\r\n  IArticleCreateRequestParams,\r\n  IArticleGetListRequestParams,\r\n  IArticleList,\r\n  IArticleUpdateRequestParams,\r\n  IComment\r\n} from \"./models\";\r\nimport RealWorldApiInstance from \"./RealWorldApiBase\";\r\n\r\nconst ARTICLES_PATH = \"/articles\";\r\n\r\nexport const ArticleGetList = async (\r\n  params: IArticleGetListRequestParams\r\n): Promise<IArticleList> => {\r\n  const res = await RealWorldApiInstance.get(ARTICLES_PATH, { params });\r\n  return res?.data as IArticleList;\r\n};\r\n\r\nexport const ArticleGetFeed = async (\r\n  params: IPagination\r\n): Promise<IArticleList> => {\r\n  const res = await RealWorldApiInstance.get(`${ARTICLES_PATH}/feed`, {\r\n    params\r\n  });\r\n  return res?.data as IArticleList;\r\n};\r\n\r\nexport const ArticleGet = async (slug: string): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.get(`${ARTICLES_PATH}/${slug}`);\r\n  return res?.data?.article as IArticle;\r\n};\r\n\r\nexport const ArticleCreate = async (\r\n  params: IArticleCreateRequestParams\r\n): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.post(ARTICLES_PATH, {\r\n    article: params\r\n  });\r\n  return res?.data?.article as IArticle;\r\n};\r\n\r\nexport const ArticleUpdate = async (\r\n  slug: string,\r\n  params: IArticleUpdateRequestParams\r\n): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.put(`${ARTICLES_PATH}/${slug}`, {\r\n    article: params\r\n  });\r\n  return res?.data?.article as IArticle;\r\n};\r\n\r\nexport const ArticleDelete = async (slug: string): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.delete(`${ARTICLES_PATH}/${slug}`);\r\n  return res?.data?.article as IArticle;\r\n};\r\n\r\nexport const ArticleAddComment = async (\r\n  slug: string,\r\n  params: IArticleAddCommentRequestParams\r\n): Promise<IComment> => {\r\n  const res = await RealWorldApiInstance.post(\r\n    `${ARTICLES_PATH}/${slug}/comments`,\r\n    {\r\n      comment: params\r\n    }\r\n  );\r\n  return res?.data?.comment as IComment;\r\n};\r\n\r\nexport const ArticleGetComments = async (slug: string): Promise<IComment[]> => {\r\n  const res = await RealWorldApiInstance.get(\r\n    `${ARTICLES_PATH}/${slug}/comments`\r\n  );\r\n  return res?.data?.comments as IComment[];\r\n};\r\n\r\nexport const ArticleDeleteComment = async (\r\n  slug: string,\r\n  commentId: number\r\n): Promise<void> => {\r\n  await RealWorldApiInstance.delete(\r\n    `${ARTICLES_PATH}/${slug}/comments/${commentId}`\r\n  );\r\n};\r\n\r\nexport const ArticleAddToFavorites = async (\r\n  slug: string\r\n): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.post(\r\n    `${ARTICLES_PATH}/${slug}/favorite`\r\n  );\r\n  return res?.data?.article as IArticle;\r\n};\r\n\r\nexport const ArticleRemoveFromFavorites = async (\r\n  slug: string\r\n): Promise<IArticle> => {\r\n  const res = await RealWorldApiInstance.delete(\r\n    `${ARTICLES_PATH}/${slug}/favorite`\r\n  );\r\n  return res?.data?.article as IArticle;\r\n};\r\n"],"sourceRoot":""}]}